package com.nagarro.ticketmanagement.controller;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.Random;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.nagarro.ticketmanagement.model.AssignedTicket;
import com.nagarro.ticketmanagement.model.Employee;
import com.nagarro.ticketmanagement.model.Ticket;
import com.nagarro.ticketmanagement.model.TicketObject;
import com.nagarro.ticketmanagement.service.TicketService;

/**
 * Control flow for any request related to ticket
 * 
 * @author nishantgarg
 *
 */
@Controller
public class TicketController {

	@Autowired
	private TicketService ticketService;

	/**
	 * It will add ticket after submitting the ticket through post request for
	 * employee
	 * 
	 * @param ticket
	 * @param request
	 * @param session
	 * @return {@link String}
	 * @throws IOException
	 * @throws IllegalStateException
	 */
	@PostMapping(value = "/ticket")
	public String createTicket(@ModelAttribute TicketObject ticketObject, HttpServletRequest request,
			HttpSession session) throws IllegalStateException, IOException {
		if (session.getAttribute("employee") != null) {
			Ticket ticket = new Ticket(ticketObject.getMessage(), ticketObject.getPriority(), ticketObject.getTitle(),
					ticketObject.getType());
			// if user attached the ticket then it will be added at this location
			// yourProject\\src\\main\\webapp\\WEB-INF\\files\\" + rand.nextInt()+filename

			if (ticketObject.getFile() != null && !ticketObject.getFile().getName().equals("file")) {
				System.err.println(ticketObject.getFile().getName()+ " hee");
				String Path = new File("").getAbsolutePath();
				Random rand = new Random();
				String temp = "\\src\\main\\webapp\\WEB-INF\\files\\" + rand.nextInt()
						+ ticketObject.getFile().getOriginalFilename();

				File file = new File(Path + temp);
				// save the file at given path
				ticketObject.getFile().transferTo(file);
				System.out.println();
				ticket.setFilePath(temp);
			}
			ticket.setEmployee((Employee) session.getAttribute("employee"));
			ticketService.createTicket(ticket);
			return "home";
		}
		return "index";
	}

	/**
	 * It will get all the employee's ticket generated by him/her for get request
	 * 
	 * @param request
	 * @param session
	 * @return {@link String}
	 */
	@GetMapping(value = "/employeeTickets")
	public String getEmployeeTickets(HttpServletRequest request, HttpSession session) {
		if (session.getAttribute("employee") == null)
			return "redirect:/";
		List<Ticket> tickets = ticketService.getAllTickets((Employee) session.getAttribute("employee"));
		request.setAttribute("tickets", tickets);
		return "employee/employeeTicketList";
	}

	/**
	 * It will get all ticket value if that id is present or not and set the request
	 * parameter for ticket and redirect to page to home
	 * 
	 * @param id
	 * @param request
	 * @param session
	 * @return {@link String}
	 */
	@GetMapping(value = "/viewTicket")
	public String getTicket(@RequestParam int id, HttpServletRequest request, HttpSession session) {

		if (session.getAttribute("employee") == null)
			return "redirect:/";

		Optional<Ticket> ticket = ticketService.getTicketById(id);
		if (ticket.isPresent()) {
			String Path = new File("").getAbsolutePath();
			request.setAttribute("path", Path);
			request.setAttribute("employee", session.getAttribute("employee"));
			request.setAttribute("ticket", ticket.get());
			request.setAttribute("comments", ticket.get().getComments());
			session.setAttribute("ticketOwner", ticket.get().getEmployee());
			return "ticket/ticket";
		}
		return "redirect:/home";
	}

	/**
	 * It will assign ticket to admin and redirect to viewTicket page
	 * 
	 * @param id
	 * @param request
	 * @param session
	 * @return {@link String}
	 */
	@GetMapping(value = "/viewTicket/assignTicket")
	public String assignTicket(@RequestParam int id, HttpServletRequest request, HttpSession session) {

		if (session.getAttribute("employee") == null)
			return "redirect:/";

		Optional<Ticket> ticket = ticketService.getTicketById(id);
		if (ticket.isPresent()) {
			ticket.get().setAssignedTicket(
					new AssignedTicket(((Employee) session.getAttribute("employee")), "In Progress"));
			ticketService.assigTicket(ticket.get());
			return "redirect:/viewTicket/?id=" + ticket.get().getId();
		}

		return "redirect:/home";
	}

	/**
	 * It admin can change the status of the ticket through post request
	 * 
	 * @param id
	 * @param assignedTicket
	 * @param request
	 * @param session
	 * @return {@link String}
	 */
	@PostMapping(value = "/viewTicket/ticketStatus")
	public String changeStatus(@RequestParam int id, @ModelAttribute AssignedTicket assignedTicket,
			HttpServletRequest request, HttpSession session) {

		if (session.getAttribute("employee") == null)
			return "redirect:/";

		Optional<Ticket> ticket = ticketService.getTicketById(id);
		if (ticket.isPresent()) {
			ticket.get().getAssignedTicket().setStatus(assignedTicket.getStatus());
			ticketService.updateStatus(ticket.get());
			return "redirect:/viewTicket/?id=" + ticket.get().getId();
		}
		return "redirect:/home";
	}

	/**
	 * Get all the tickets when admin logged in and handle accordingly
	 * 
	 * @param request
	 * @param session
	 * @return {@link String}
	 */
	@GetMapping(value = "adminTickets")
	public String getAdminTickets(HttpServletRequest request, HttpSession session) {

		if (session.getAttribute("employee") == null)
			return "redirect:/";
		List<Ticket> tickets = ticketService.getAllTickets();
		request.setAttribute("tickets", tickets);
		return "home";
	}

}
